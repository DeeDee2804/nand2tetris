digits = [None] * 10

def binary_to_decimal(binary_str):
    # Calculate value for bits 0-14 (leftmost is LSB)
    value = 0
    for i in range(15):
        if binary_str[i] == '1':
            value += (1 << i)
    
    # Handle sign bit (bit 15, rightmost)
    if binary_str[15] == '1':
        # If sign bit is 1, make it negative
        value = value | (-32768)  # Set bit 15 to make it negative
    
    return value

def convert_binary_pattern():
    with open("FlappyBird/Score0.jack", "w") as f:
        f.write("class Score {\n")
        for i in range(10):
            f.write(f"    method void draw{i}(int position) {{\n")
            f.write("        var int memAddress;\n")
            f.write("        let memAddress = 16719 + position;\n")
            f.write("        // Draw digit {i} at memAddress\n")

            for j, binary in enumerate(digits[i]):
                decimal = binary_to_decimal(binary)
                f.write(f"        do Memory.poke(memAddress + {j*32}, {decimal});    // {binary}\n")
    
            f.write("        return;\n")
            f.write("    }\n")
        f.write("}\n")

# Test with digit 0 pattern as strings
digits[0] = [
    "0000011111100000",
    "0001111111111000",
    "0011111111111100",
    "0111110001111110",
    "0111100000111110",
    "1111000000011111",
    "1111000000011111",
    "1111000000011111",
    "1111000000011111",
    "1111000000011111",
    "0111100000111110",
    "0111110001111110",
    "0011111111111100",
    "0001111111111000",
    "0000011111100000",
    "0000000000000000"
]

digits[1] = [
    "0000001111000000",
    "0000111111000000",
    "0001111111000000",
    "0011111111000000",
    "0111111111000000",
    "0000111111000000",
    "0000111111000000",
    "0000111111000000",
    "0000111111000000",
    "0000111111000000",
    "0000111111000000",
    "0000111111000000",
    "0111111111111100",
    "0111111111111100",
    "0111111111111100",
    "0000000000000000"
]

digits[2] = [
    "0000111111100000",
    "0001111111110000",
    "0011111111111000",
    "0111110001111100",
    "0111100000111100",
    "0000000000111100",
    "0000000001111000",
    "0000000011110000",
    "0000000111100000",
    "0000001111000000",
    "0000011110000000",
    "0000111100000000",
    "0111111111111100",
    "0111111111111100",
    "0111111111111100",
    "0000000000000000"
]

digits[3] = [
    "0000111111100000",
    "0001111111110000",
    "0011111111111000",
    "0111110001111100",
    "0111100000111100",
    "0000000000111100",
    "0000000001111000",
    "0000011111110000",
    "0000011111110000",
    "0000000000111100",
    "0000000000111100",
    "0111100001111100",
    "0111111111111000",
    "0011111111110000",
    "0000111111000000",
    "0000000000000000"
]

digits[4] = [
    "0000000111100000",
    "0000001111100000",
    "0000011111100000",
    "0000111111100000",
    "0001111111100000",
    "0011111111100000",
    "0111110111100000",
    "0111100111100000",
    "1111000111100000",
    "1111111111111100",
    "1111111111111100",
    "1111111111111100",
    "0000000111100000",
    "0000000111100000",
    "0000000111100000",
    "0000000000000000"
]

digits[5] = [
    "0111111111111100",
    "0111111111111100",
    "0111111111111100",
    "0111100000000000",
    "0111100000000000",
    "0111111111100000",
    "0111111111111000",
    "0000000001111100",
    "0000000000111100",
    "0000000000111100",
    "0111100001111100",
    "0111111111111000",
    "0011111111110000",
    "0001111111000000",
    "0000000000000000",
    "0000000000000000"
]

digits[6] = [
    "0000011111100000",
    "0001111111110000",
    "0011111111111000",
    "0111110001111100",
    "0111100000000000",
    "0111100000000000",
    "0111111111100000",
    "0111111111111000",
    "0111110001111100",
    "0111100000111100",
    "0111100000111100",
    "0111110001111100",
    "0011111111111000",
    "0001111111110000",
    "0000011111100000",
    "0000000000000000"
]

digits[7] = [
    "0111111111111100",
    "0111111111111100",
    "0111111111111100",
    "0000000001111000",
    "0000000011110000",
    "0000000111100000",
    "0000001111000000",
    "0000011110000000",
    "0000111100000000",
    "0001111000000000",
    "0011110000000000",
    "0111100000000000",
    "0111000000000000",
    "0110000000000000",
    "0100000000000000",
    "0000000000000000"
]

digits[8] = [
    "0000111111000000",
    "0011111111110000",
    "0111110001111000",
    "0111100000111100",
    "0111100000111100",
    "0011110001111000",
    "0001111111110000",
    "0000111111000000",
    "0011111111110000",
    "0111110001111000",
    "0111100000111100",
    "0111100000111100",
    "0111110001111000",
    "0011111111110000",
    "0000111111000000",
    "0000000000000000"
]

digits[9] = [
    "0000111111000000",
    "0011111111110000",
    "0111110001111000",
    "0111100000111100",
    "0111100000111100",
    "0111110001111100",
    "0011111111111100",
    "0001111111111100",
    "0000000000111100",
    "0000000000111100",
    "0111100001111000",
    "0111111111110000",
    "0011111111100000",
    "0001111110000000",
    "0000000000000000",
    "0000000000000000"
]


convert_binary_pattern()
